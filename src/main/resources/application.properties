# --- MySQL DATABASE ---
# URL de conexión: jdbc:mysql://<host>:<port>/<database_name>
# Reemplaza <host>, <port>, y <database_name> con tus valores.
# Por defecto, MySQL corre en el host 'localhost' y el puerto '3306'.



# Para desarrollo local con MariaDB (sobrescrito por Docker Compose al correr en Docker)
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mariadb://localhost:3306/inventario_db_local?createDatabaseIfNotExist=true}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:root}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:root}
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

spring.jpa.database-platform=${SPRING_JPA_DATABASE_PLATFORM:org.hibernate.dialect.MariaDBDialect}
# Opcional: spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDB106Dialect

spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}

# --- JPA / Hibernate ---
# Dialecto de Hibernate para MySQL. Elige la versión que corresponda a tu MySQL.
# Para MySQL 8+: org.hibernate.dialect.MySQLDialect
# Para versiones más antiguas como 5.7: org.hibernate.dialect.MySQL57Dialect
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# DDL (Data Definition Language) auto:
#   create: BORRA y crea el schema cada vez. Útil al inicio del desarrollo. PERDERÁS DATOS.
#   update: Intenta actualizar el schema. Puede fallar con cambios complejos. Bueno para desarrollo iterativo.
#   validate: Valida que el schema coincida, no hace cambios. Bueno para producción.
#   none: No hace nada. Asume que el schema ya existe y es correcto.
# Para empezar y que Hibernate cree las tablas por ti:
spring.jpa.hibernate.ddl-auto=update

# Mostrar SQL generado por Hibernate en la consola (útil para debugging)
spring.jpa.show-sql=true

# Formatear el SQL mostrado (si show-sql=true)
spring.jpa.properties.hibernate.format_sql=true

# Elimina o comenta la configuración de H2 si la tenías:
# spring.h2.console.enabled=false